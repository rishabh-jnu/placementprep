// class Solution {
// public:
//     int maxProduct(vector<int>& nums) {
//         int size = nums.size();
//         int maxProd = nums[0];
//         int currMax = nums[0];
//         int currMin = nums[0];

//         if(size == 1){
//             return nums[0];
//         }

//         for(int i=1; i<size; i++){
//             int temp = currMax;
//             currMax = max({nums[i], currMax*nums[i], currMin*nums[i]});
//             currMin = min({nums[i], temp*nums[i], currMin*nums[i]});
//             maxProd = max(maxProd , currMax);
//         }
//         return maxProd;
//     }
// };


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int size = nums.size();
        int pre =1;
        int suff =1;
        int maxProd = INT_MIN;

        for(int i=0; i<size; i++){
            if(pre == 0) pre = 1;
            if(suff == 0) suff = 1;

            pre = pre*nums[i];
            suff = suff*nums[size-i-1];

            maxProd = max(maxProd, max(pre, suff));
        }
        return maxProd;
    }
};
