// class Solution {
// public:
//     vector<vector<string>> groupAnagrams(vector<string>& strs) {
//         unordered_map<string, vector<string>> anagramMap;
        
//         for (string str : strs) {
//             string sortedStr = str;
//             sort(sortedStr.begin(), sortedStr.end());
//             anagramMap[sortedStr].push_back(str);
//         }
        
//         vector<vector<string>> result;
//         for (auto& entry : anagramMap) {
//             result.push_back(entry.second);
//         }
        
//         return result;
//     }
// };



class Solution {
public:

    string generateStrs(string &word){
        int arr[26] = {0};

        for(char &ch:word){
            arr[ch -'a']++;
        }

        string newWord = "";
        for(int i=0; i<26; i++){
            int freq = arr[i];
            if(freq>0){
                newWord = newWord + string(freq, i+'a');
            }
        }
        return newWord;
    }

    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        int size = strs.size();

        unordered_map<string, vector<string>>mp;
        vector<vector<string>>result;

        for(int i=0; i<size; i++){
            string temp = strs[i];
            string newStrs = generateStrs(temp);
            mp[newStrs].push_back(temp);
        }

        for(auto &itr : mp){
            result.push_back(itr.second);
        }
        return result;
    }
};
