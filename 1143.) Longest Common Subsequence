class Solution {
public:
    int solveUsingRec(string a, string b, int i, int j){
        //base case
        if(i>=a.length()){
            return 0;
        }
        if(j>=b.length()){
            return 0;
        }
        int ans = 0;
        if(a[i]==b[j]){
            ans = 1 + solveUsingRec(a, b, i+1, j+1);
        }
        else{
            ans = 0 + max(solveUsingRec(a, b, i+1, j), solveUsingRec(a, b, i, j+1));
        }
        return ans;
    }

    int solveUsingMem(string& a, string& b, int i, int j,  vector<vector<int>>& dp){
        //base case
        if(i>=a.length()){
            return 0;
        }
        if(j>=b.length()){
            return 0;
        }

        //if ans return
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int ans = 0;
        if(a[i]==b[j]){
            dp[i][j] = 1 + solveUsingMem(a, b, i+1, j+1, dp);
        }
        else{
            dp[i][j] = 0 + max(solveUsingMem(a, b, i+1, j, dp), solveUsingMem(a, b, i, j+1, dp));
        }
        return dp[i][j];
    }

    int longestCommonSubsequence(string text1, string text2) {
        int i=0;
        int j=0;
        vector<vector<int>> dp(text1.length()+1, vector<int>(text2.length()+1, -1));
        int ans = solveUsingMem(text1, text2, i, j, dp);
        // int ans = solveUsingRec(text1, text2, i, j);
        return ans;
    }
};
